@page "/{pageSlug}"
@using Sitecore_Blazor.Helper
@using Sitecore_Blazor.Models.Dtos
@using Sitecore_Blazor.RestGateway
@using sitecoreblazor
@using System.Reflection
@using Newtonsoft.Json
@using sitecoreblazor.SitecoreModels
@inject IRestGatewayManager RestGatewayManager
@inject NavigationManager NavigationManager

@if (ContentData != null)
{
    <nav class="navbar navbar-expand-lg">
        <div class="container">
            <PlacehonderHelper Name="jss-header" RouteData="ContentData.sitecore.route.placeholders" />
        </div>
    </nav>
    <PlacehonderHelper Name="jss-main" RouteData="ContentData.sitecore.route.placeholders" />
    <PlacehonderHelper Name="jss-footer" RouteData="ContentData.sitecore.route.placeholders" />
}
else
{
    <p>Loading or no components available...</p>
}


@code {
    [Parameter]
    public string pageSlug { get; set; }

    public Root ContentData { get; set; }

    public Dictionary<string, string> DictionaryData { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        string apiUrl = Constants.SitecoreCMUrl + Constants.LayoutRender + Constants.ItemApi + Constants.ProjectRoot + pageSlug + "&sc_apikey=" + Constants.SCApiKey;

        var result = await RestGatewayManager.GetAsync<Root>(apiUrl, null, RestEndPointManager.RestEndpoint.CE, null);
        ContentData = result.ResultData;

        string dictionaryUrl = Constants.SitecoreCMUrl + Constants.DictionaryRender + Constants.AppNameWithVersion + "?sc_apikey=" + Constants.SCApiKey;

        var dictionaryResult = await RestGatewayManager.GetAsync<DictionaryResponse>(dictionaryUrl, null, RestEndPointManager.RestEndpoint.CE, null);
        DictionaryData = dictionaryResult.ResultData.Phrases;

        DictionaryHelper.SetDictionaryData(DictionaryData);
    }
}
