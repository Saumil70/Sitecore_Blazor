@using sitecoreblazor.SitecoreModels;
@using System.Reflection

@foreach (var component in Components)
{
    Type componentType = GetType(component.componentName);
    if (componentType != null)
    {
        var parameters = new Dictionary<string, object> { { "Fields", component.fields } };
        <DynamicComponent Type="componentType" Parameters="parameters" />
    }
}

@code {
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public Dictionary<string, List<Component>> RouteData { get; set; }

    public RenderFragment ChildContent { get; set; }
    public List<Component> Components { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //ADD Null Check
        Components = RouteData.Where(x => x.Key == Name).FirstOrDefault().Value;
    }
    private Type GetType(string parameter)
    {
        parameter = ConvertToPascalCase(parameter);
        var assembly = Assembly.GetExecutingAssembly();
        return assembly.GetTypes()
                       .FirstOrDefault(t => t.Name == parameter);
    }

    public static string ConvertToPascalCase(string input)
    {
        // Split the input by spaces and capitalize the first letter of each word
        string[] words = input.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        for (int i = 0; i < words.Length; i++)
        {
            if (words[i].Length > 0)
            {
                // Capitalize the first letter, keep the rest unchanged
                words[i] = char.ToUpper(words[i][0]) + words[i].Substring(1);
            }
        }

        return string.Join(string.Empty, words); // Combine words without spaces
    }

}

